{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started # Requirements # Your server/development computer must meet these requirements in order to run Invention Framework Apps: PHP v7.4.0 or higher NodeJS JavaScript Runtime v12.0.0 or higher PHP PDO extension with sqlite and mysql driver PHP JSON extension Installation # You can install Invention using Composer : composer create-project onesoft-sudo/invention-project myapp This will create an Invention project in myapp/ directory. Quick start # Make sure that PHP is installed globally, otherwise the app might not work properly. Go to your project directory and run: npm install npm run dev php console serve The first command installs the project dependencies, the second one compiles the javascript and css files and puts them into the public/ folder and the last ommand starts a local development server (PHP's built in dev server) at localhost:8080 . You can now open http://localhost:8080 using your favourite browser.","title":"Getting Started"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#requirements","text":"Your server/development computer must meet these requirements in order to run Invention Framework Apps: PHP v7.4.0 or higher NodeJS JavaScript Runtime v12.0.0 or higher PHP PDO extension with sqlite and mysql driver PHP JSON extension","title":"Requirements"},{"location":"#installation","text":"You can install Invention using Composer : composer create-project onesoft-sudo/invention-project myapp This will create an Invention project in myapp/ directory.","title":"Installation"},{"location":"#quick-start","text":"Make sure that PHP is installed globally, otherwise the app might not work properly. Go to your project directory and run: npm install npm run dev php console serve The first command installs the project dependencies, the second one compiles the javascript and css files and puts them into the public/ folder and the last ommand starts a local development server (PHP's built in dev server) at localhost:8080 . You can now open http://localhost:8080 using your favourite browser.","title":"Quick start"},{"location":"basics/basic_configuration/","text":"Basic Configuration # The first thing you should do is to edit the .env file. This file has all environment-related configuration variables. Database Connection # In the .env file, there are some DB_ prefixed variables, these are related to database connection of your app. The DB_VENDOR is the database connection type you want to use. Default is MySQL. See the valid values for this variable . The DB_HOST is the hostname of the database server. The DB_PORT is the port number of the database server. The DB_USER is the username that you want to use to authenticate with the database server. The DB_PASSWORD is the password for the given user. The DB_NAME is the database name on your database server. But if you're using SQLite, you need to specify an absolute path to the DB file in this variable. Also, in this case you only need to specify the DB_VENDOR and no other DB variable is required. Older versions of SQLite does not support some operations such as `ALTER...CHANGE` or `ALTER...DROP` etc, so there's a chance of loosing data if you do such operations with SQLite. Supported Database Vendors # Currently invention only supports MySQL, MariaDB and SQLite. MySQL is recommended. Vendor Name Value for DB_VENDOR MySQL mysql MariaDB mariadb SQLite sqlite Other Configurations # Variable Name Type Description TMP_DIR String Temporary file storage directory. CACHE_DIR String Cache file storage directory. CONF_DIR String Configuration directory. APP_ENV_DEV Integer Specify if the if is under development.","title":"Basic Configuration"},{"location":"basics/basic_configuration/#basic-configuration","text":"The first thing you should do is to edit the .env file. This file has all environment-related configuration variables.","title":"Basic Configuration"},{"location":"basics/basic_configuration/#database-connection","text":"In the .env file, there are some DB_ prefixed variables, these are related to database connection of your app. The DB_VENDOR is the database connection type you want to use. Default is MySQL. See the valid values for this variable . The DB_HOST is the hostname of the database server. The DB_PORT is the port number of the database server. The DB_USER is the username that you want to use to authenticate with the database server. The DB_PASSWORD is the password for the given user. The DB_NAME is the database name on your database server. But if you're using SQLite, you need to specify an absolute path to the DB file in this variable. Also, in this case you only need to specify the DB_VENDOR and no other DB variable is required. Older versions of SQLite does not support some operations such as `ALTER...CHANGE` or `ALTER...DROP` etc, so there's a chance of loosing data if you do such operations with SQLite.","title":"Database Connection"},{"location":"basics/basic_configuration/#supported-database-vendors","text":"Currently invention only supports MySQL, MariaDB and SQLite. MySQL is recommended. Vendor Name Value for DB_VENDOR MySQL mysql MariaDB mariadb SQLite sqlite","title":"Supported Database Vendors"},{"location":"basics/basic_configuration/#other-configurations","text":"Variable Name Type Description TMP_DIR String Temporary file storage directory. CACHE_DIR String Cache file storage directory. CONF_DIR String Configuration directory. APP_ENV_DEV Integer Specify if the if is under development.","title":"Other Configurations"},{"location":"basics/creating_a_new_route/","text":"Creating a new route # First of all, open routes/web.php file and add this code: Route::get(\"/my-page\", function(){ return \"Hello world!\"; }); This will create a new route and whenever a GET request is made on /my-page the callback function will be fired; and its return value Hello world! will be outputted. Congratulations! You've created your first route!","title":"Creating a new route"},{"location":"basics/creating_a_new_route/#creating-a-new-route","text":"First of all, open routes/web.php file and add this code: Route::get(\"/my-page\", function(){ return \"Hello world!\"; }); This will create a new route and whenever a GET request is made on /my-page the callback function will be fired; and its return value Hello world! will be outputted. Congratulations! You've created your first route!","title":"Creating a new route"},{"location":"basics/file_and_folder_structure/","text":"File & Folder Structure # A fresh invention-based project will look like this: - project_root/ - app/ - Commands/ - Events/ - Exceptions/ - Http/ - Controllers/ - Middleware/ - Requests/ - Resources/ - Config.php - Initializers/ - Models/ - Policies/ - config/ - database/ - factories/ - migrations/ - seeders/ - public/ - index.php - resources/ - sass/ - js/ - views/ - components/ - errors/ - layouts/ welcome.power.php - routes/ - api.php - auth.php - web.php - storage/ - tests/ - var/ - cache/ - dumps/ - log/ - tmp/ - vendor/ - .editorconfig - .env - .env.example - .gitignore - ChangeLog.md - composer.json - composer.lock - console - LICENSE - package.json - package-lock.json - README.md - webpack.config.js - webpack.development.js - webpack.production.js A short overview of some important directories is given below. The app/ directory # The app/ directory contains almost 99% of the application code. Models, Controllers and Middleware are found here. The config/ directory # This directory contains the application configuration files. The database/ directory # This directory contains factories, migrations and seeders. The public/ directory # This directory is the web server root. The index.php file in this directory is the entry point of the app. Never put any personal or sensitive information/file in `public` directory. The resources/ directory # Static/dynamic assets such as javascript files, typescript files, css/sass files, images go here. The routes/ directory # This directory contains all of the application routes. The storage/ directory # This directory is for the application data storage. You can store uploaded files here. The tests/ directory # PHPUnit tests directory. The var/ directory # This is the variables directory. Runtime and temporary files, cache and log files go here.","title":"File & Folder Structure"},{"location":"basics/file_and_folder_structure/#file-folder-structure","text":"A fresh invention-based project will look like this: - project_root/ - app/ - Commands/ - Events/ - Exceptions/ - Http/ - Controllers/ - Middleware/ - Requests/ - Resources/ - Config.php - Initializers/ - Models/ - Policies/ - config/ - database/ - factories/ - migrations/ - seeders/ - public/ - index.php - resources/ - sass/ - js/ - views/ - components/ - errors/ - layouts/ welcome.power.php - routes/ - api.php - auth.php - web.php - storage/ - tests/ - var/ - cache/ - dumps/ - log/ - tmp/ - vendor/ - .editorconfig - .env - .env.example - .gitignore - ChangeLog.md - composer.json - composer.lock - console - LICENSE - package.json - package-lock.json - README.md - webpack.config.js - webpack.development.js - webpack.production.js A short overview of some important directories is given below.","title":"File &amp; Folder Structure"},{"location":"basics/file_and_folder_structure/#the-app-directory","text":"The app/ directory contains almost 99% of the application code. Models, Controllers and Middleware are found here.","title":"The app/ directory"},{"location":"basics/file_and_folder_structure/#the-config-directory","text":"This directory contains the application configuration files.","title":"The config/ directory"},{"location":"basics/file_and_folder_structure/#the-database-directory","text":"This directory contains factories, migrations and seeders.","title":"The database/ directory"},{"location":"basics/file_and_folder_structure/#the-public-directory","text":"This directory is the web server root. The index.php file in this directory is the entry point of the app. Never put any personal or sensitive information/file in `public` directory.","title":"The public/ directory"},{"location":"basics/file_and_folder_structure/#the-resources-directory","text":"Static/dynamic assets such as javascript files, typescript files, css/sass files, images go here.","title":"The resources/ directory"},{"location":"basics/file_and_folder_structure/#the-routes-directory","text":"This directory contains all of the application routes.","title":"The routes/ directory"},{"location":"basics/file_and_folder_structure/#the-storage-directory","text":"This directory is for the application data storage. You can store uploaded files here.","title":"The storage/ directory"},{"location":"basics/file_and_folder_structure/#the-tests-directory","text":"PHPUnit tests directory.","title":"The tests/ directory"},{"location":"basics/file_and_folder_structure/#the-var-directory","text":"This is the variables directory. Runtime and temporary files, cache and log files go here.","title":"The var/ directory"},{"location":"basics/mvc_basic_concepts/","text":"Basic MVC Concepts # MVC is a software pattern. It stands for Model-View-Controller. Here is a short brief about Models, Views, Controllers: Model # A model is a special class that is used work with database. It represents a single row of a table. Within a model, you can do CRUD (Create-Read-Update-Delete) Operations and other useful stuff. Controllers # Controller is a piece of class that holds the application logic. A Controller contains some action methods and each method contains different logic. Optionally controllers can also pass data to the views and return it the user so that the user can see a dynamic webpage. Views # Views are the templates of a webpage, we can pass data to the views and represent those data to the user, dynamically.","title":"Basic MVC Concepts"},{"location":"basics/mvc_basic_concepts/#basic-mvc-concepts","text":"MVC is a software pattern. It stands for Model-View-Controller. Here is a short brief about Models, Views, Controllers:","title":"Basic MVC Concepts"},{"location":"basics/mvc_basic_concepts/#model","text":"A model is a special class that is used work with database. It represents a single row of a table. Within a model, you can do CRUD (Create-Read-Update-Delete) Operations and other useful stuff.","title":"Model"},{"location":"basics/mvc_basic_concepts/#controllers","text":"Controller is a piece of class that holds the application logic. A Controller contains some action methods and each method contains different logic. Optionally controllers can also pass data to the views and return it the user so that the user can see a dynamic webpage.","title":"Controllers"},{"location":"basics/mvc_basic_concepts/#views","text":"Views are the templates of a webpage, we can pass data to the views and represent those data to the user, dynamically.","title":"Views"},{"location":"views/intro_to_the_views/","text":"Intro to the Views # In the route callback function, instead of returning some string, we render a view and then return it. We can do this using the global view() function or return a View object: Route::get(\"/\", function(){ return view('home'); }); Route::get(\"/home\", function(){ return new View('home'); }); Now this view() function or View object checks if the resources/views/ directory contains a view named [given_name].php or [given_name].power.php ; if exists then it returns the whole content of the file as a string. In this case the [given_name] is home . If the given view doesn't exist then it will throw a `FileNotFoundException`.","title":"Intro to the Views"},{"location":"views/intro_to_the_views/#intro-to-the-views","text":"In the route callback function, instead of returning some string, we render a view and then return it. We can do this using the global view() function or return a View object: Route::get(\"/\", function(){ return view('home'); }); Route::get(\"/home\", function(){ return new View('home'); }); Now this view() function or View object checks if the resources/views/ directory contains a view named [given_name].php or [given_name].power.php ; if exists then it returns the whole content of the file as a string. In this case the [given_name] is home . If the given view doesn't exist then it will throw a `FileNotFoundException`.","title":"Intro to the Views"},{"location":"views/meet_powerparser/","text":"Meet PowerParser # PowerParser is a strong, regex-based and excellent templating engine which will make your work and code less. PowerParser is included with Invention Framework, so you don't need to worry about that. PowerParser supports a bunch of directives that can make your code elegant and less. If you're familier with Laravel Framework , then you should probably know about Laravel's Blade Directives , and PowerParser supports almost every directive of Blade! For example, an if statement in Blade: @if(condition) <!--HTML--> @endif But in PowerParser, you need to just replace the @ with a : :if(condition) <!--HTML--> :endif Outputting something: {{ \"text\" }} {{ $variable }} {{ func() }} PowerParser will call htmlspecialchars() and filter strings every time when you output something in this way. Also you might need a single line PHP code which should not be outputted, for that use this: !{{ \"Text\" }}! <!--Nothing is outputted--> !{{ $variable++ }}! <!--Increments $variable by 1--> !{{ $var = func() }}! <!--Calls func() and assigns the return value to $var--->","title":"Meet PowerParser"},{"location":"views/meet_powerparser/#meet-powerparser","text":"PowerParser is a strong, regex-based and excellent templating engine which will make your work and code less. PowerParser is included with Invention Framework, so you don't need to worry about that. PowerParser supports a bunch of directives that can make your code elegant and less. If you're familier with Laravel Framework , then you should probably know about Laravel's Blade Directives , and PowerParser supports almost every directive of Blade! For example, an if statement in Blade: @if(condition) <!--HTML--> @endif But in PowerParser, you need to just replace the @ with a : :if(condition) <!--HTML--> :endif Outputting something: {{ \"text\" }} {{ $variable }} {{ func() }} PowerParser will call htmlspecialchars() and filter strings every time when you output something in this way. Also you might need a single line PHP code which should not be outputted, for that use this: !{{ \"Text\" }}! <!--Nothing is outputted--> !{{ $variable++ }}! <!--Increments $variable by 1--> !{{ $var = func() }}! <!--Calls func() and assigns the return value to $var--->","title":"Meet PowerParser"},{"location":"views/powerparser_directive_dowhile/","text":"PowerParser Directive: :dowhile # This is equivalent to PHP do-while loops. Syntax # :dowhile <!--HTML or Other PowerParser Directive--> :enddowhile(condition) Example # <ul> !{{ $i = 1 }}! :dowhile <li>Page {{ $i }}</li> !{{ $i++ }}! :enddowhile($i <= 0) </ul> This will output: Page 1","title":"PowerParser Directive: :dowhile"},{"location":"views/powerparser_directive_dowhile/#powerparser-directive-dowhile","text":"This is equivalent to PHP do-while loops.","title":"PowerParser Directive: :dowhile"},{"location":"views/powerparser_directive_dowhile/#syntax","text":":dowhile <!--HTML or Other PowerParser Directive--> :enddowhile(condition)","title":"Syntax"},{"location":"views/powerparser_directive_dowhile/#example","text":"<ul> !{{ $i = 1 }}! :dowhile <li>Page {{ $i }}</li> !{{ $i++ }}! :enddowhile($i <= 0) </ul> This will output: Page 1","title":"Example"},{"location":"views/powerparser_directive_for/","text":"PowerParser Directive: :for # This is equivalent to PHP for loops. Syntax # :for(initialization; condition; expression) <!--HTML or Other PowerParser Directive--> :endfor Example # <ul> :for($i = 1; $i <= 5; $i++) <li>Page {{ $i }}</li> :endfor </ul> This will output: Page 1 Page 2 Page 3 Page 4 Page 5","title":"PowerParser Directive: :for"},{"location":"views/powerparser_directive_for/#powerparser-directive-for","text":"This is equivalent to PHP for loops.","title":"PowerParser Directive: :for"},{"location":"views/powerparser_directive_for/#syntax","text":":for(initialization; condition; expression) <!--HTML or Other PowerParser Directive--> :endfor","title":"Syntax"},{"location":"views/powerparser_directive_for/#example","text":"<ul> :for($i = 1; $i <= 5; $i++) <li>Page {{ $i }}</li> :endfor </ul> This will output: Page 1 Page 2 Page 3 Page 4 Page 5","title":"Example"},{"location":"views/powerparser_directive_foreach/","text":"PowerParser Directive: :foreach # This is equivalent to PHP foreach loops. Syntax # :foreach($array_or_object as $value) <!--HTML or Other PowerParser Directive--> :endforeach or, :foreach($array_or_object as $key => $value) <!--HTML or Other PowerParser Directive--> :endforeach Example # <ul> :foreach($_SERVER as $key => $value) <li>{{ $key }} => {{ $value }}</li> :endforeach </ul> This will print out all $_SERVER key-value pairs.","title":"PowerParser Directive: :foreach"},{"location":"views/powerparser_directive_foreach/#powerparser-directive-foreach","text":"This is equivalent to PHP foreach loops.","title":"PowerParser Directive: :foreach"},{"location":"views/powerparser_directive_foreach/#syntax","text":":foreach($array_or_object as $value) <!--HTML or Other PowerParser Directive--> :endforeach or, :foreach($array_or_object as $key => $value) <!--HTML or Other PowerParser Directive--> :endforeach","title":"Syntax"},{"location":"views/powerparser_directive_foreach/#example","text":"<ul> :foreach($_SERVER as $key => $value) <li>{{ $key }} => {{ $value }}</li> :endforeach </ul> This will print out all $_SERVER key-value pairs.","title":"Example"},{"location":"views/powerparser_directive_if/","text":"PowerParser Directive: :if # This is equivalent to PHP if statements. Simple If Conditions # :if(condition) <!--HTML or Other PowerParser Directive--> :endif If-else Conditions # :if(condition) <!--HTML or Other PowerParser Directive--> :else <!--HTML or Other PowerParser Directive--> :endif If-elseif-else Conditions # :if(condition) <!--HTML or Other PowerParser Directive--> :elseif(condition) <!--HTML or Other PowerParser Directive--> :elseif(condition) <!--HTML or Other PowerParser Directive--> :else <!--HTML or Other PowerParser Directive--> :endif","title":"PowerParser Directive: :if"},{"location":"views/powerparser_directive_if/#powerparser-directive-if","text":"This is equivalent to PHP if statements.","title":"PowerParser Directive: :if"},{"location":"views/powerparser_directive_if/#simple-if-conditions","text":":if(condition) <!--HTML or Other PowerParser Directive--> :endif","title":"Simple If Conditions"},{"location":"views/powerparser_directive_if/#if-else-conditions","text":":if(condition) <!--HTML or Other PowerParser Directive--> :else <!--HTML or Other PowerParser Directive--> :endif","title":"If-else Conditions"},{"location":"views/powerparser_directive_if/#if-elseif-else-conditions","text":":if(condition) <!--HTML or Other PowerParser Directive--> :elseif(condition) <!--HTML or Other PowerParser Directive--> :elseif(condition) <!--HTML or Other PowerParser Directive--> :else <!--HTML or Other PowerParser Directive--> :endif","title":"If-elseif-else Conditions"},{"location":"views/powerparser_directive_while/","text":"PowerParser Directive: :while # This is equivalent to PHP while loops. Syntax # :while(condition) <!--HTML or Other PowerParser Directive--> :endwhile Example # <ul> !{{ $i = 1 }}! :while($i <= 5) <li>Page {{ $i }}</li> !{{ $i++ }}! :endwhile </ul> This will output: Page 1 Page 2 Page 3 Page 4 Page 5","title":"PowerParser Directive: :while"},{"location":"views/powerparser_directive_while/#powerparser-directive-while","text":"This is equivalent to PHP while loops.","title":"PowerParser Directive: :while"},{"location":"views/powerparser_directive_while/#syntax","text":":while(condition) <!--HTML or Other PowerParser Directive--> :endwhile","title":"Syntax"},{"location":"views/powerparser_directive_while/#example","text":"<ul> !{{ $i = 1 }}! :while($i <= 5) <li>Page {{ $i }}</li> !{{ $i++ }}! :endwhile </ul> This will output: Page 1 Page 2 Page 3 Page 4 Page 5","title":"Example"},{"location":"views/powerparser_directives/","text":"PowerParser Directives # All PowerParser directives are listed here: :args :component :csrf :dowhile :extends :for :foreach :function :if :php :section :title :while :yield","title":"PowerParser Directives"},{"location":"views/powerparser_directives/#powerparser-directives","text":"All PowerParser directives are listed here: :args :component :csrf :dowhile :extends :for :foreach :function :if :php :section :title :while :yield","title":"PowerParser Directives"}]}